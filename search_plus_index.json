{"./":{"url":"./","title":"介绍","keywords":"","body":"我的学习笔记 🙌 慢慢成长，没有硝烟 © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/git/gitbook.html":{"url":"doc/git/gitbook.html","title":"Git相关","keywords":"","body":"Gitbook、Github Pages Gitbook 常见命令 gitbook init 初始化配置 gitbook install 安装插件 gitbook serve 本地预览 gitbook 插件配置 教程链接：http://t.zoukankan.com/snowdreams1006-p-10662585.html 常见插件：https://www.mapull.com/gitbook/comscore/custom/plugin/common/alerts.html 点此查看此 Gitbook 配置地址 Gitbook + Github Pages 利用 Github Pages实现静态网页直接部署能力，利用gitbook 可实现文章分享能力 步骤 1.首先创建 github pages，教程：https://docs.github.com/cn/pages/getting-started-with-github-pages 2.配置 github action，实现 git push 即可自动打包部署 gitbook 无需本地 gitbook build 教程地址：https://zanderzhao.github.io/gitbook-action/ [!TIP|style:flat|label: Tips: |iconVisibility:hidden] 注意教程中token的配置; 另外主分支必须使用master, 使用main作为主分支则会编译失败，注意避坑 # Sample workflow for building and deploying a gitbook site to GitHub Pages name: 'Gitbook Action Build' on: push: branches: - master # trigger branch # Allows you to run this workflow manually from the Actions tab workflow_dispatch: # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages permissions: contents: read pages: write id-token: write # Allow one concurrent deployment concurrency: group: \"pages\" cancel-in-progress: true jobs: # Build job build: runs-on: ubuntu-latest steps: - name: Checkout action uses: actions/checkout@v2 - name: Gitbook Action uses: zanderzhao/gitbook-action@v1.2.4 with: token: ${{ secrets.WORKFLOW_PERSONAL_TOKEN }} 3.settings-pages-Build and deployment-Source 设置为 Deploy from a branch，然后将分支改为 gh-pages /(root) 4.finish © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/git/github.html":{"url":"doc/git/github.html","title":"Github","keywords":"","body":"Github © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/flutter/":{"url":"doc/flutter/","title":"Flutter","keywords":"","body":"Flutter 官网：https://flutter.dev/ 插件：https://pub.dev/ 开源：https://github.com/flutter Provider 状态管理插件，Google官方推荐 相关介绍 provider | Flutter Package How to Use the Provider Pattern in Flutter https://www.jianshu.com/p/564a2251485e 优秀的博文 【译】学习Flutter中新的Navigator和Router系统_唯鹿的博客-CSDN博客 优秀开源项目 flutter_deer: 🦌 Flutter 练习项目 © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/Jetpack.html":{"url":"doc/android/Jetpack.html","title":"Android","keywords":"","body":"JetPack ViewModel How to use view binding in Android There is a couple of things you should do and I try to make it organized and listed: (Based on Android Developers docs from this link and my personal experiences) You need to use Android Studio 3.6 canary11+ (I'm currently using Android Studio 4 and it is doing the job well for me) You can find it from here: https://developer.android.com/studio/archive You need to upgrade your Gradle wrapper to Gradle \"5.6.4\" and Gradle build tool to \"3.6.0-rc01\", higher versions also work so don't be afraid to be updated distributionUrl=https\\://services.gradle.org/distributions/gradle-5.6.4-all.zip dependencies { ... classpath 'com.android.tools.build:gradle:3.6.0-rc01' } To enable view binding in a module, add the viewBinding element to its build.gradle file, as shown in the following example: android { ... viewBinding { enabled = true } } If you want a layout file to be ignored while generating binding classes, add the tools:viewBindingIgnore=\"true\" attribute to the root view of that layout file: ... If view binding is enabled for a module, a binding class is generated for each XML layout file that the module contains. Each binding class contains references to the root view and all views that have an ID. The name of the binding class is generated by converting the name of the XML file to camel case and adding the word \"Binding\" to the end. For example, given a layout file called result_profile.xml: The generated binding class is called ResultProfileBinding. This class has two fields: a TextView called name and a Button called button. The ImageView in the layout has no ID, so there is no reference to it in the binding class. Every binding class also includes a getRoot() method, providing a direct reference for the root view of the corresponding layout file. In this example, the getRoot() method in the ResultProfileBinding class returns the LinearLayout root view. To set up an instance of the binding class for use with an activity, fragment or card view adapter perform the following steps: in the activity's onCreate() method: private ResultProfileBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); binding = ResultProfileBinding.inflate(getLayoutInflater()); View view = binding.getRoot(); setContentView(view); } in the fragments's onCreateView() method: private FragmentHousesBinding binding; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { // Inflate the layout for this fragment binding = FragmentHousesBinding.inflate(inflater, container, false); init(); return binding.getRoot(); } in the card view adapter's onCreateViewHolder() method: HouseCardPropertyFragmnetBinding binding; @Override public Holder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { binding = HouseCardPropertyFragmnetBinding.inflate(LayoutInflater .from(parent.getContext()), parent, false); return new Holder(binding); } @Override public void onBindViewHolder(@NonNull HouseAdapter.Holder holder, int position) { holder.bindData(getItem(position)); } class Holder extends RecyclerView.ViewHolder { HouseCardPropertyFragmnetBinding view; Holder(@NonNull HouseCardPropertyFragmnetBinding v) { super(v.getRoot()); view = v; } void bindData(Tag item) { view.tagTxt.setText(item.Name); } } that's it you are free from the findViewById from now on ;) 使用教程 https://proandroiddev.com/new-in-android-viewbindings-the-difference-from-databinding-library-bef5945baf5e 一个变更： 面板使用控件不能使用xml，我写了很多xml需要在重写成动态布局 潜在风险： 其他开发如果也不清楚写了一些dp、xml、sp则会造成问题 ime-widgets的通用layout使用xml布局的layout则不能在面板端使用 对于整体更改缩放值提供方案 在面板、单手、悬浮中外层增加一个自定义ViewGroup专门处理measure 缩放操作（缩放处理横向、竖向、以及ResTag 处理业务定制scaleType） 类似于xml解析的时候将需要更改缩放的dp 设置为固定数值或者指定单位（15/15mp），然后在解析的时候统一处理缩放 劣势： 现在已经适配的缩放值，则需要去掉 © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/ui_qusition.html":{"url":"doc/android/ui_qusition.html","title":"常见UI问题","keywords":"","body":"常见UI问题 联动Header 沉浸式actonbar：Material Design 实战 之 第六弹 —— 可折叠式标题栏(CollapsingToolbarLayout) & 系统差异型的功能实现（充分利用系统状态栏空间） - 腾讯云开发者社区-腾讯云 代码示例 --> --> --> --> --> --> --> --> --> --> 扩大点击区域 fun View.expendTouchArea(expendSize: Int) { val parentView = parent as View parentView.post { val rect = Rect() getHitRect(rect) rect.left -= expendSize rect.top -= expendSize rect.right += expendSize rect.bottom += expendSize parentView.touchDelegate = TouchDelegate(rect, this) } } © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/包体积优化.html":{"url":"doc/android/包体积优化.html","title":"包体积优化","keywords":"","body":"© Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/冷启动优化.html":{"url":"doc/android/冷启动优化.html","title":"冷启动优化","keywords":"","body":"© Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/内存优化.html":{"url":"doc/android/内存优化.html","title":"内存优化","keywords":"","body":"© Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/android/wms.html":{"url":"doc/android/wms.html","title":"wms","keywords":"","body":"WMS © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/figma/":{"url":"doc/figma/","title":"Figma","keywords":"","body":"Figma 插件： 插件名 作用 Avatars 右键自动填充椭圆头像 学习 正常学习 线性图标、填充图标 玻璃拟态/毛玻璃 ColorStyle/TextStyle/EffectsStyle/FillStytle prototype 原型图，页面跳转之类的（右侧菜单栏） page处理 遮罩处理 背景透明、遮罩替换 前进/后退处理 水平滚动、竖向滚动 smart animate 栅格系统 layout grid 用栅格辅助设计 响应式 拖动网页自适应 resize 右键 组合Frame left and right ： padding不变，内容缩小 center ： 居中，resize时始终保持中间 auto layout 很厉害 规范效率 组件命名规范 .如 列表/电话、列表/邮箱 ，这样在组件assets中可以快速显示 多个类似组件都可以抽取出来，比如多种类型表头 Variants 多状态 按钮多状态，如颜色、禁用、开关 开关： value设置成 off/on 会自动显示成开关 properties(视频27分28秒) 状态，可以处理暗黑模式和亮色模式多套 动画/动效软件 配图 查找网站 花瓣、Pinterest)、Unsplash、500px、Behance)、淘宝品牌站 常见经验： 类型 做法 作用 快捷键 shift + 方向 快速调整位置，每次加10px 标尺 file - 标尺 shift+R frame padding 快捷键 cmd - shift + k 快速置入图片 蒙版 复制一层 设置范围，容器内范围外部分被裁切 水平居中 选中几个view 然后点击右侧设计水平居中 线 平滑边角 autolayout 文字与group，右键autolayout padding固定，长度自适应 layout grid 快捷键 cmd + g 边距 选中多个控件，右侧菜单点击[-]等边距 透明度 线叠加、融合 让线显示效果舒服一点 © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/音视频/音频.html":{"url":"doc/音视频/音频.html","title":"音视频","keywords":"","body":"音频 相关概念 频率与音调 通过频率可以区分声音的差别，对应人的感知就是音调。如男生、女生（女生频率更高） 振幅和响度 振幅就是声音震动的幅度，也代表携带能量的大小，对应人的感知就是对应的响度或音量 波形、音色 基波/谐波 大多数音色都是通过波形叠加产生，如以下常见的波形： 均衡器 定义 在通信系统中是用来矫正波形信号中幅度频率特性和相位频率特性的部件 在数字系统中作用是调整音频中各个频率范围的增益或衰减值 理解 调整沟构成该音频的不同频率声音的音量 应用场景 让声音更具特色，也可以修复瑕疵 降噪 压限 压缩器和限制器的统称 限制器：超过某一音量的声音直接切掉 压缩器：压缩音频动态范围，对超过限制的声音做出增大或缩小 采样频率 采样是指连续时间的离散化的过程，其中均匀采样是指每隔相等时间间隔采样一次，每秒需要采集的声音样本个数叫做采样频率，音频文件中常常见到的44.1kHz、11kHz就是指的采样（频）率。 相关链接 频率和音调 https://www.bilibili.com/video/BV1yE411A7gy?spm_id_from=333.337.search-card.all.click&vd_source=384023524ae242f336b6c3d7cbaf0e7e © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "},"doc/音视频/flutter_audio.html":{"url":"doc/音视频/flutter_audio.html","title":"Flutter Audio","keywords":"","body":"flutter 音频处理 plugins audioplayers audioplayers | Flutter Package https://github.com/bluefireteam/audioplayers 原理：通过channel接口，各平台分别实现对应player 优势：以兼容全平台 缺点：部分接口各平台未完全兼容，如：ByteSource.play() just_audio just_audio | Flutter Package https://github.com/ryanheise/just_audio/issues/97 原理： 优势：平台及功能兼容全面，详情：平台兼容详情 缺点： Android 波形图、振幅、频率API https://developer.android.com/reference/android/media/audiofx/Visualizer#getFft(byte[]) 处理波形图新思路： 音频播放使用三方插件来兼容各平台播放控制 使用自研纯dart获取fft等波形相关处理 © Guangliang all right reserved，powered by GitbookUpdateTime: 2022/10/15 06:34:24 "}}